package repair;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

public class userListPanel extends javax.swing.JPanel {

    DefaultTableModel model;
    private AdminForm adminForm;
    private Timer timer;

    public userListPanel(AdminForm adminForm) {
        initComponents();

        this.adminForm = adminForm;
        jLabel2.setVisible(false); // Резултати от търсене етикет

        loadUserData();

        jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                adminForm.switchToUserAddPanel();
            }
        });

        timer = new Timer(50000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                refreshUserList();
            }
        });

        timer.start();

    }

    // SELECT заявка за извличане на всички потребители
    private void loadUserData() {
        List<Object[]> userList = User.getAllUsers();
        String[] cols = {"ID", "Име", "Имейл", "Телефон", "Град", "Статус", "ЕГН", "Пощ.код", "Роля", "Фирма", "Име на Фирма", "Фирма ЕИК", "Фирма МОЛ", "Фирма ДДС", "Фирма Адрес"};

        // Като от упражнения за задаване на модел на контроли
        model = new DefaultTableModel(cols, 0);

        // Прави таблицата да не се едитва
        jTable1.setDefaultEditor(Object.class, null);

        // Обхождане и добавяне към модела , като foreach($users as $user) { ... } ?>
        for (Object[] user : userList) {

            if ((int) user[9] == 1) {
                user[9] = "Да";
            } else {
                user[9] = "Не";
            }

            if (user[8].equals("admin")) {
                user[8] = "Администратор";
            } else {
                user[8] = "Клиент";
            }

            if (user[5].equals("active")) {
                user[5] = "Активен";
            } else {
                user[5] = "Неактивен";
            }

            model.addRow(user);
        }

        jTable1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Добавяне");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Редактиране");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Изтриване");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Обнови");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Търсене");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Всички потребители");

        jButton6.setText("Експорт");

        jLabel2.setText("Резултати: 0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(114, 114, 114)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 925, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)
                        .addComponent(jButton3)
                        .addComponent(jButton4)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    // Прихващане на полетата при клик на ред от таблицата
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {

            // Кастване на ID-то към int от String
            String idString = jTable1.getValueAt(selectedRow, 0).toString();
            int userId = Integer.parseInt(idString);

            try (Connection connection = config.getConnection()) {
                String sql = "SELECT * FROM users WHERE id = ?";

                try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                    pstmt.setInt(1, userId);

                    try (ResultSet rs = pstmt.executeQuery()) {
                        if (rs.next()) {

                            int id = rs.getInt("id");
                            String name = rs.getString("name");
                            String email = rs.getString("email");
                            String phone = rs.getString("phone");
                            String city = rs.getString("city");
                            String status = rs.getString("status");
                            String egn = rs.getString("egn");
                            String pkod = rs.getString("pkod");
                            String role = rs.getString("role");
                            String is_firm = rs.getString("is_firm");
                            String firm_name = rs.getString("firm_name");
                            String firm_eik = rs.getString("firm_eik");
                            String firm_mol = rs.getString("firm_mol");
                            String firm_address = rs.getString("firm_address");
                            String firm_dds = rs.getString("firm_dds");

                            // Pass the data to the userEditPanel
                            adminForm.switchToUserEditPanel(id, name, email, phone, city, status, egn, pkod, role, is_firm, firm_name, firm_eik, firm_mol, firm_dds, firm_address);
                        } else {
                            JOptionPane.showMessageDialog(this, "Не е намерен потребител с този ID!");
                        }
                    } catch (SQLException rsEx) {
                        JOptionPane.showMessageDialog(this, "Грешка при обработка на резултатите: " + rsEx.getMessage());
                    }
                } catch (SQLException pstmtEx) {
                    JOptionPane.showMessageDialog(this, "Грешка при изпълнение на заявката: " + pstmtEx.getMessage());
                }
            } catch (SQLException connEx) {
                JOptionPane.showMessageDialog(this, "Грешка при свързване с базата данни: " + connEx.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Моля, изберете ред от таблицата!");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    // Бутон за обновяване
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        refreshUserList();
    }//GEN-LAST:event_jButton4ActionPerformed


    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    // Търсачка
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String keyword = jTextField1.getText();

        List<Object[]> search = User.searchUsers(keyword);

        String[] cols = {"ID", "Име", "Имейл", "Телефон", "Град", "Статус", "ЕГН", "Пощ.код", "Роля", "Фирма", "Име на Фирма", "Фирма ЕИК", "Фирма МОЛ", "Фирма ДДС", "Фирма Адрес"};
        DefaultTableModel model = new DefaultTableModel(cols, 0);

        for (Object[] user : search) {
            model.addRow(user);
        }

        jTable1.setModel(model);
        jTable1.setDefaultEditor(Object.class, null);

        // Етикет, който показва броя на съвпаденията (просто е готино)
        jLabel2.setVisible(true);
        int resultCount = search.size();
        jLabel2.setText("Резултати: " + resultCount);
    }//GEN-LAST:event_jButton5ActionPerformed

    // Изтриване бутон, избира се ред от таблицата, прихваща id-то и изпълнява заявката
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Моля, изберете потребител за изтриване.");
            return;
        }

        String idString = jTable1.getValueAt(selectedRow, 0).toString();
        int userId = Integer.parseInt(idString);

        int confirm = JOptionPane.showConfirmDialog(this, "Сигурни ли сте, че искате да изтриете този потребител?", "Потвърждение", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {

            boolean isDeleted = User.deleteUser(userId);

            if (isDeleted) {

                refreshUserList();
                JOptionPane.showMessageDialog(this, "Потребителят е изтрит успешно.");
            } else {
                JOptionPane.showMessageDialog(this, "Грешка при изтриване на потребителя.");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    // Обновяване на данните с бутон
    public void refreshUserList() {
        List<Object[]> userList = User.getAllUsers();

        String[] cols = {"ID", "Име", "Имейл", "Телефон", "Град", "Статус", "ЕГН", "Пощ.код", "Роля", "Фирма",
            "Име на Фирма", "Фирма ЕИК", "Фирма МОЛ", "Фирма ДДС", "Фирма Адрес"};

        DefaultTableModel model = new DefaultTableModel(cols, 0);

        for (Object[] user : userList) {
            if ((int) user[9] == 1) {
                user[9] = "Да";
            } else {
                user[9] = "Не";
            }

            if (user[8].equals("admin")) {
                user[8] = "Администратор";
            } else {
                user[8] = "Клиент";
            }

            if (user[5].equals("active")) {
                user[5] = "Активен";
            } else {
                user[5] = "Неактивен";
            }

            model.addRow(user);
        }

        jTable1.setModel(model);

        // да не може да се редактира в самата таблица
        jTable1.setDefaultEditor(Object.class, null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
