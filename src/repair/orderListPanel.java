package repair;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class orderListPanel extends javax.swing.JPanel {

    config q = new config();
    DefaultTableModel model;
    private AdminForm adminForm;

    public orderListPanel(AdminForm adminForm) {
        initComponents();
        this.adminForm = adminForm;

        lblSearchResults.setVisible(false); // Резултати от търсене етикет

        btnAddOrder.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                adminForm.switchToOrderAddPanel();
            }
        });

        ArrayList<Order> orders = q.loadOrderData();

        model = (DefaultTableModel) orderTable.getModel();

        for (Order order : orders) {
            model.addRow(order.toTableArray());
        }

        orderTable.setModel(model);

    }

    // Обновяване на данните в таблицата
    public void refreshTable() {
        model.setRowCount(0);
        ArrayList<Order> orders = q.loadOrderData();
        for (Order order : orders) {
            model.addRow(order.toTableArray());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblAllOrder = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new repair.Table();
        btnAddOrder = new repair.Button();
        btnEditOrder = new repair.Button();
        btnDeleteOrder = new repair.Button();
        btnRefreshOrder = new repair.Button();
        txtSearchOrder = new javax.swing.JTextField();
        btnSearchOrder = new repair.Button();
        lblSearchResults = new javax.swing.JLabel();

        lblAllOrder.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblAllOrder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAllOrder.setText("ВСИЧКИ ЗАЯВКИ");
        lblAllOrder.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblAllOrder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Машина", "Клиент", "Телефон", "Статус", "Рафт", "Дата"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTable);

        btnAddOrder.setBackground(new java.awt.Color(0, 153, 255));
        btnAddOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnAddOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/repair/assets/save.png"))); // NOI18N
        btnAddOrder.setText("Добавяне");

        btnEditOrder.setBackground(new java.awt.Color(0, 153, 255));
        btnEditOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnEditOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/repair/assets/editing.png"))); // NOI18N
        btnEditOrder.setText("Редактиране");
        btnEditOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditOrderActionPerformed(evt);
            }
        });

        btnDeleteOrder.setBackground(new java.awt.Color(0, 153, 255));
        btnDeleteOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/repair/assets/erase.png"))); // NOI18N
        btnDeleteOrder.setText("Изтриване");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        btnRefreshOrder.setBackground(new java.awt.Color(0, 153, 255));
        btnRefreshOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnRefreshOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/repair/assets/refresh.png"))); // NOI18N
        btnRefreshOrder.setText("Обнови");
        btnRefreshOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshOrderActionPerformed(evt);
            }
        });

        txtSearchOrder.setBackground(new java.awt.Color(255, 255, 255));
        txtSearchOrder.setForeground(new java.awt.Color(0, 0, 0));
        txtSearchOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchOrderActionPerformed(evt);
            }
        });

        btnSearchOrder.setBackground(new java.awt.Color(0, 153, 255));
        btnSearchOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/repair/assets/search.png"))); // NOI18N
        btnSearchOrder.setText("Търсене");
        btnSearchOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchOrderActionPerformed(evt);
            }
        });

        lblSearchResults.setText("Резултати: 0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAddOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefreshOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(txtSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSearchResults)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAllOrder)
                .addGap(354, 354, 354))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAllOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefreshOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchResults))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditOrderActionPerformed
        int selectedRow = orderTable.getSelectedRow();
        if (selectedRow != -1) {
            try {

                String idString = orderTable.getValueAt(selectedRow, 0).toString();
                int orderId = Integer.parseInt(idString);

                String[] columns = {
                    "ro.repair_id", "ro.user_id", "ro.product_id", "ro.shelf_id",
                    "ro.fault_desc", "ro.work_carried_out_desc", "ro.created_at",
                    "ro.status", "ro.is_warranty", "ro.warranty_denied",
                    "ro.labor_cost", "ro.parts_cost", "ro.total_price",
                    "u.name", "p.product_name", "s.shelf_name",
                    "c.category_name", "b.brand_name"
                };

                String table = "repair_orders ro"
                        + " JOIN users u ON ro.user_id = u.id"
                        + " JOIN products p ON ro.product_id = p.product_id"
                        + " JOIN shelves s ON ro.shelf_id = s.shelf_id"
                        + " JOIN categories c ON p.category_id = c.cat_id"
                        + " JOIN brands b ON p.brand_id = b.brand_id";
                String whereClause = "ro.repair_id = ?";

                Object[] params = {orderId};

                ArrayList<String> result = q.select(columns, table, whereClause, params);

                if (!result.isEmpty()) {

                    String[] orderData = result.get(0).split("---");

                    int repair_id = Integer.parseInt(orderData[0]);
                    int user_id = Integer.parseInt(orderData[1]);
                    int product_id = Integer.parseInt(orderData[2]);
                    int shelf_id = Integer.parseInt(orderData[3]);
                    String fault_desc = orderData[4];
                    String work_carried_out_desc = orderData[5];
                    String created_at = orderData[6];
                    String status = orderData[7];
                    int is_warranty = Integer.parseInt(orderData[8]);
                    int warranty_denied = Integer.parseInt(orderData[9]);
                    double labor_cost = Double.parseDouble(orderData[10]);
                    double parts_cost = Double.parseDouble(orderData[11]);
                    double total_price = Double.parseDouble(orderData[12]);
                    String user_name = orderData[13];
                    String product_name = orderData[14];
                    String shelf_name = orderData[15];
                    String category_name = orderData[16];
                    String brand_name = orderData[17];

                    adminForm.switchToOrderEditPanel(
                            repair_id, user_id, product_id, shelf_id,
                            fault_desc, work_carried_out_desc, created_at,
                            status, is_warranty, warranty_denied,
                            labor_cost, parts_cost, total_price,
                            user_name, product_name, shelf_name,
                            category_name, brand_name);
                } else {
                    JOptionPane.showMessageDialog(this, "Няма намерена заявка за ремонт с това ID!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Възникна грешка: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Моля, изберете ред от таблицата!");
        }
    }//GEN-LAST:event_btnEditOrderActionPerformed

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        int selectedRow = orderTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Моля, изберете заявка за изтриване.");
            return;
        }

        // Кастване на ID-то към int от String
        String idString = orderTable.getValueAt(selectedRow, 0).toString();
        int orderId = Integer.parseInt(idString);

        int confirm = JOptionPane.showConfirmDialog(this, "Сигурни ли сте, че искате да изтриете тази заявка?", "Потвърждение", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean isDeleted = q.delete("repair_orders", "repair_id", orderId);

            if (isDeleted) {
                refreshTable();
                JOptionPane.showMessageDialog(this, "Заявката е изтрита успешно.");
            } else {
                JOptionPane.showMessageDialog(this, "Грешка при изтриване на заявка.");
            }
        }
    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void btnRefreshOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshOrderActionPerformed
        refreshOrderList();
    }//GEN-LAST:event_btnRefreshOrderActionPerformed

    private void txtSearchOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchOrderActionPerformed

    // Търсачка
    private void btnSearchOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchOrderActionPerformed
        String keyword = txtSearchOrder.getText().trim();

        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Моля, въведете ключова дума за търсене!", "Грешка", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String[] columns = {
            "repair_orders.repair_id",
            "products.product_name",
            "users.name",
            "users.phone",
            "repair_orders.status",
            "shelves.shelf_name",
            "repair_orders.created_at"
        };
        String table = """
        repair_orders
        JOIN users ON repair_orders.user_id = users.id
        JOIN products ON repair_orders.product_id = products.product_id
        JOIN shelves ON repair_orders.shelf_id = shelves.shelf_id
    """;

        String whereClause = """
        products.product_name LIKE ? OR 
        users.name LIKE ? OR 
        users.phone LIKE ? OR 
        repair_orders.status LIKE ? OR 
        shelves.shelf_name LIKE ?
    """;
        Object[] params = {
            "%" + keyword + "%",
            "%" + keyword + "%",
            "%" + keyword + "%",
            "%" + keyword + "%",
            "%" + keyword + "%"
        };

        ArrayList<String> searchResults = q.select(columns, table, whereClause, params);

        String[] columnNames = {
            "ID", "Машина", "Клиент", "Телефон", "Статус", "Рафт", "Дата"
        };
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        for (String row : searchResults) {
            String[] machineData = row.split("---");
            model.addRow(machineData);
        }

        orderTable.setModel(model);
        orderTable.setDefaultEditor(Object.class, null);

        lblSearchResults.setVisible(true);
        int resultCount = searchResults.size();
        lblSearchResults.setText("Резултати: " + resultCount);
    }//GEN-LAST:event_btnSearchOrderActionPerformed

    // Обновяване на данните с бутон
    public void refreshOrderList() {

        model.setRowCount(0);

        String[] columns = {
            "repair_orders.repair_id",
            "products.product_name",
            "users.name",
            "users.phone",
            "repair_orders.status",
            "shelves.shelf_name",
            "repair_orders.created_at"
        };
        String table = """
        repair_orders
        JOIN users ON repair_orders.user_id = users.id
        JOIN products ON repair_orders.product_id = products.product_id
        JOIN shelves ON repair_orders.shelf_id = shelves.shelf_id
    """;

        String whereClause = "";
        Object[] params = null;

        ArrayList<String> orderList = q.select(columns, table, whereClause, params);

        for (String order : orderList) {
            String[] orderDetails = order.split("---");

            model.addRow(orderDetails);
        }

        orderTable.setModel(model);

        // да не може да се редактира в самата таблица
        orderTable.setDefaultEditor(Object.class, null);

        // Скриване на резултати: 4
        lblSearchResults.setVisible(false);
        txtSearchOrder.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private repair.Button btnAddOrder;
    private repair.Button btnDeleteOrder;
    private repair.Button btnEditOrder;
    private repair.Button btnRefreshOrder;
    private repair.Button btnSearchOrder;
    private repair.Button btnSendEmailUser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAllOrder;
    private javax.swing.JLabel lblSearchResults;
    private repair.Table orderTable;
    private javax.swing.JTextField txtSearchOrder;
    // End of variables declaration//GEN-END:variables
}
